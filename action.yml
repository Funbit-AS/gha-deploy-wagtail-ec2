name: "Deploy to EC2"
description: "Deploys a Wagtail project to EC2"

inputs:
  project-name:
    description: "Name of project"
    required: True
  deployment-target:
    description: "production or staging"
    required: True
  image-name:
    description: ""
    required: True
  service-name:
    description: ""
    required: True
  aws-access-key-id:
    description: ""
    required: True
  aws-secret-access-key:
    description: ""
    required: True
  aws-region:
    description: ""
    required: False
    default: eu-central-1
  uses-tailwind:
    description: "Does the project use Tailwind"
    required: false
    default: false
  elm-paths:
    description: "All paths to elm files ( '/wagtail/{{ project-name }}/{{ folder }}/elm' ) in project seperated by whitespace"
    required: false
    default: ''
  elm-version:
    description: "The version of Elm to be used to compile the elm files in the project"
    required: false
    default: 0.19.1
  ecr-build-context-path:
    description: "The context path for the 'build and push to ecr action'. Will use inputs.project-name if no input is given"
    required: false
    default: ""


runs:
  using: "composite"
  steps:
    - name: Setup Node
      if: inputs.uses-tailwind!='false' || inputs.elm-paths!=''
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name:  Install and Compile Production Elm
      if: inputs.elm-paths!=''
      uses: Funbit-AS/gha-compile-elm@v1
      with:
        github-workspace: ${{ github.workspace }}
        elm-paths: ${{ inputs.elm-paths }}
        elm-version: ${{ inputs.elm-version }}

    - name: Tailwind - Install and Compile Production
      if: inputs.uses-tailwind!='false'
      run: |
        cd wagtail/${{ inputs.project-name }}/theme/static_src
        npm install
        npx tailwindcss --postcss -i ./src/styles.css -o ../static/css/dist/styles.css --minify
      shell: bash
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: "Set ECR build context path"
      run: |
        project_path="${{ inputs.project-name }}"
        context_path="${{ inputs.ecr-build-context-path }}"

        # If ecr-build-context-path is not provided, set it to the value of project-name
        if [ -z "$context_path" ]; then
          context_path="wagtail/$project_path"
        fi

        # Set output for ecr-build-context-path to be used in other actions
        echo "::set-output name=ecr-build-context-path::$context_path"
      shell: bash

    - name: Build and push to Amazon ECR
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.ecr-build-context-path }}
        file: wagtail/${{ inputs.project-name }}/docker/${{ inputs.image-name }}/Dockerfile
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.project-name }}-${{ inputs.image-name }}:${{ inputs.deployment-target }}
        push: true
        cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ inputs.project-name }}-${{ inputs.image-name }}:${{ inputs.deployment-target }}
        cache-to: type=inline
      
    - name: Get EC2 Server Instance ID
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "/${{ inputs.project-name }}/${{ inputs.deployment-target }}/EC2_INSTANCE_ID"
        env_variable_name: "EC2_INSTANCE_ID"
      
    - name: AWS SSM Send-Command to pull and restart docker
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      with:
        aws-region: ${{ inputs.aws-region }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        instance-ids: ${{ env.EC2_INSTANCE_ID }}

        working-directory: /home/ec2-user
        # Pull new image, restart containers (as necessary) and migrate db
        command: su ec2-user -c 'docker-compose pull && docker-compose up -d && docker-compose exec -d ${{ inputs.service-name }} python manage.py migrate'
        comment: Executed by Github Actions - ${{ inputs.project-name }} (${{ inputs.deployment-target }})