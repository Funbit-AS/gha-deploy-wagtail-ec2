name: "Deploy to EC2"
description: "Deploys a Wagtail project to EC2"

inputs:
  uses-tailwind:
    description: "Does the project use Tailwind"
    required: True
  elm-paths:
    description: "All paths to elm files ( '/wagtail/{{ project-name }}/{{ folder }}/elm' ) in project seperated by whitespace"
    required: True
    default: ""
  elm-version:
    description: "The version of Elm to be used to compile the elm files in the project"
    required: false
    default: 0.19.1    

runs:
  using: "composite"
  steps:
    - name: Setup Node
      if: uses-tailwind || elm-paths!=''
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name:  Install and Compile Production Elm
      if: elm-paths!=''
      uses: Funbit-AS/gha-compile-elm@v1
      with:
        elm-paths: ${{ input.elm-folders }}
        elm-version: ${{ input.elm-version }}
      env:
        PROJECT_NAME: ${{ env.PROJECT_NAME }}
        GITHUB_WORKSPACE: ${{ github.workspace }}

    - name: Tailwind - Install and Compile Production
      if: uses-tailwind
      run: |
        cd wagtail/${{ input.project-name }}/theme/static_src
        npm install
        npx tailwindcss --postcss -i ./src/styles.css -o ../static/css/dist/styles.css --minify
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push to Amazon ECR
      uses: docker/build-push-action@v2
      with:
        context: wagtail/${{ input.project-name }}
        file: wagtail/${{ input.project-name }}/docker/${{ input.image-name }}/Dockerfile
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ input.project-name }}-${{ input.image-name }}:${{ input.deployment-target }}
        push: true
        cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ input.project-name }}-${{ input.image-name }}:${{ input.deployment-target }}
        cache-to: type=inline
      
    - name: Get EC2 Server Instance ID
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:deployment-target
        ssm_parameter: "/${{ input.project-name }}/${{ input.deployment-target }}/EC2_INSTANCE_ID"
        env_variable_name: "EC2_INSTANCE_ID"
      
    - name: AWS SSM Send-Command to pull and restart docker
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      with:
        aws-region: ${{ secrets.aws_region }}
        aws-access-key-id: ${{ secrets.aws_access_key_id }}
        aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
        instance-ids: ${{ input.EC2_INSTANCE_ID }}

        working-directory: /home/ec2-user
        # Pull new image, restart containers (as necessary) and migrate db
        command: su ec2-user -c 'docker-compose pull && docker-compose up -d && docker-compose exec -d ${{ input.service-name }} python manage.py migrate'
        comment: Executed by Github Actions - ${{ input.project-name }} (${{ input.deployment-target }})